public List<String> inferTags(String inputSent){
        if (stateModel == null || observationModel == null) return null; // check if this is a good idea
        HashSet<String> currentStates = new HashSet<>();
        ArrayList<HashMap<String, String>> backTrace = new ArrayList<HashMap<String, String>>();
        HashMap<String, Double> currentScores;
        HashMap<String, Double> previousScores = new HashMap<>();

        currentStates.add("#");
        previousScores.put("#", 0.0); // not sure if this is right

        String[] inputTokens = inputSent.strip().split(" "); // strip() may not be needed
        for (int i = 0; i < inputTokens.length; i++){
            currentScores = new HashMap<>();

            for (String currentState : currentStates) {
                double obsWeight = observationModel.get(currentState).getOrDefault(inputTokens[i], unkWeight);
                for (String s : stateModel.get(currentState).keySet()) {
                    currentScores.put(s, previousScores.get(currentState) + stateModel.get(currentState).get(s) + obsWeight);
                }

            }
            // find the key associated with the max value in the map
            double maxValue = Double.NEGATIVE_INFINITY;
            String maxKey = "";
            for (String s : currentScores.keySet()) {
                if (currentScores.get(s) > maxValue) {
                    maxValue = currentScores.get(s);
                    maxKey = s;
                }
            }

            // TODO: fill in the backtrace
            HashMap<String, String> currentTraceLevel = new HashMap<>();
            //currentTraceLevel.put(maxKey, backTrace.get(i-1).);
            backTrace.add(currentTraceLevel);
        }
        ArrayList<String> res = new ArrayList<>();
        for (HashMap<String, String> item : backTrace){
            //res.add(item.)

        }
        return res;
    }